00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/20/2014 5:35:01 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :CSS422 Project
00000000                             3  * Written by :Nicholas Abel and Julio Perez
00000000                             4  * Date       :November 7, 2014
00000000                             5  * Description:Disassembler
00000000                             6  *-----------------------------------------------------------
00000000  =000000AA                  7  STARTPT   EQU $AA     *starting point
00000000  =00000055                  8  ENDPT     EQU $55     *ending point
00000000  =00000400                  9  temp      EQU $400    *location to work at
00000000  =0000A000                 10  stack     EQU $A000
00000000  =00001217                 11  example   EQU %0001001000010111    * I made up bits 0 to 11      
00000000  =0000000C                 12  shift12   EQU 12                   * Shift 12 bits 
00000000  =0000000A                 13  shift10   EQU 10                   * Shift 10 bits
00000000  =0000000D                 14  shift13   EQU 13 
00000000                            15  
00000000                            16  
00001000                            17          ORG    $1000
00001000                            18  START:                          
00001000                            19  *        LEA     ASKSTART, A1    *message to ask user for input
00001000                            20  *        MOVE.B  #13, D0         *rule 13 allows print without line feed and carriage return if neccesary
00001000                            21  *        TRAP    #15             *Display A1 message
00001000                            22  *        
00001000                            23  *        MOVE.B  #4, D0          *input rule saves to D1
00001000                            24  *        TRAP    #15             *initiate read from keyboard
00001000                            25  *        
00001000                            26  *        MOVE.B  D1, STARTPT        *save number to NUM1
00001000                            27  *        
00001000                            28  *        LEA     ASKEND, A1      *ask about ending memory location
00001000                            29  *        MOVE.B  #13, D0         
00001000                            30  *        TRAP    #15             *display A1
00001000                            31  *        
00001000                            32  *        MOVE.B  #4, D0          *
00001000                            33  *        TRAP    #15
00001000                            34  *        
00001000                            35  *        MOVE.B  D1, ENDPT         *ending memory location stored
00001000                            36  
00001000  4FF9 0000A000             37          LEA     stack,SP        *Load the SP
00001006                            38  
00001006  41F9 00001024             39          LEA     jmp_table,A0    *Index into the table
0000100C                            40  
0000100C  4280                      41          CLR.L   D0              *Zero it
0000100E  4281                      42          CLR.L   D1
00001010                            43   
00001010                            44  *Get word size element
00001010                            45  
00001010  3C3C 1217                 46          MOVE.W  #example,D6     *variable put in place
00001014                            47          
00001014  3006                      48          MOVE.W D6, D0
00001016                            49  
00001016  123C 000C                 50          MOVE.B  #shift12,D1       *Shift 12 bits to the right  
0000101A                            51  
0000101A  E268                      52          LSR.W   D1,D0           *Move the bits
0000101C                            53  
0000101C  C0FC 0006                 54          MULU    #6,D0       *Form offset     
00001020                            55  
00001020  4EB0 0000                 56          JSR     0(A0,D0)    *Jump indirect with index
00001024                            57  * check read pointer location against EnDPt if end done
00001024                            58  * otherwise move back into read sub routine
00001024                            59                      
00001024                            60  
00001024                            61  *----------------------------------------------------------------
00001024                            62  *                       OpCode ID Table                         |
00001024                            63  *----------------------------------------------------------------
00001024                            64  
00001024                            65  
00001024                            66  jmp_table  
00001024                            67  
00001024  4EF9 00001084             68                 JMP         code0000
0000102A                            69  
0000102A  4EF9 00001088             70                 JMP         code0001
00001030                            71  
00001030  4EF9 0000108C             72                 JMP         code0010
00001036                            73  
00001036  4EF9 00001090             74                 JMP         code0011
0000103C                            75  
0000103C  4EF9 00001094             76                 JMP         code0100
00001042                            77  
00001042  4EF9 00001098             78                 JMP         code0101
00001048                            79  
00001048  4EF9 0000109C             80                 JMP         code0110
0000104E                            81  
0000104E  4EF9 000010A0             82                 JMP         code0111
00001054                            83  
00001054  4EF9 000010A4             84                 JMP         code1000
0000105A                            85  
0000105A  4EF9 000010A8             86                 JMP         code1001
00001060                            87  
00001060  4EF9 000010AC             88                 JMP         code1010
00001066                            89  
00001066  4EF9 000010B0             90                 JMP         code1011
0000106C                            91  
0000106C  4EF9 000010B2             92                 JMP         code1100
00001072                            93  
00001072  4EF9 000010B6             94                 JMP         code1101
00001078                            95  
00001078  4EF9 000010BA             96                 JMP         code1110
0000107E                            97  
0000107E  4EF9 000010BE             98                 JMP         code1111
00001084                            99  
00001084                           100  *subroutines from jump table
00001084                           101  
00001084                           102  
00001084  4E72 2700                103  code0000       STOP        #$2700
00001088                           104  
00001088  6000 0038                105  code0001       BRA         MoveByte
0000108C                           106  
0000108C  4E72 2700                107  code0010       STOP        #$2700
00001090                           108  
00001090  4E72 2700                109  code0011       STOP        #$2700
00001094                           110  
00001094  4E72 2700                111  code0100       STOP        #$2700
00001098                           112  
00001098  4E72 2700                113  code0101       STOP        #$2700
0000109C                           114  
0000109C  4E72 2700                115  code0110       STOP        #$2700
000010A0                           116  
000010A0  4E72 2700                117  code0111       STOP        #$2700
000010A4                           118  
000010A4  4E72 2700                119  code1000       STOP        #$2700
000010A8                           120  
000010A8  4E72 2700                121  code1001       STOP        #$2700
000010AC                           122  
000010AC  4E72 2700                123  code1010       STOP        #$2700
000010B0                           124   
000010B0  60FE                     125  code1011       BRA        code1011
000010B2                           126  
000010B2  4E72 2700                127  code1100       STOP        #$2700
000010B6                           128  
000010B6  4E72 2700                129  code1101       STOP        #$2700
000010BA                           130  
000010BA  4E72 2700                131  code1110       STOP        #$2700
000010BE                           132  
000010BE  4E72 2700                133  code1111       STOP        #$2700
000010C2                           134  
000010C2                           135   
000010C2                           136  
000010C2                           137  *----------------------------------------------------------------
000010C2                           138  *                OpCode Breakdown Methods                       |
000010C2                           139  *----------------------------------------------------------------
000010C2                           140  
000010C2                           141  *--------------MOVE.B Decode-----------------------------
000010C2                           142  
000010C2  4EB9 000012B8            143  MoveByte JSR disMoveByte
000010C8                           144  
000010C8                           145  *continue searching through the machine code for source then destination
000010C8                           146  *because of writing format
000010C8  4280                     147          CLR.L D0
000010CA  4281                     148          CLR.L D1
000010CC  3006                     149          MOVE.W D6, D0     *reallocate example to reconfigure for next step
000010CE  4EB9 0000111C            150          JSR RegModeXnDecode * src decode
000010D4  4EB9 000010DE            151          JSR DesMoveDecode   *destination decode 
000010DA  4E71                     152          NOP
000010DC  4E75                     153          RTS
000010DE                           154          
000010DE  6000 0002                155  DesMoveDecode   BRA DesModeDecode        
000010E2                           156          
000010E2  1E3C 0001                157  DesModeDecode   MOVE.B #%1, D7  *set flag for destination    
000010E6  3006                     158                  MOVE.W  D6, D0
000010E8  123C 000C                159                  MOVE.B #shift12, D1
000010EC  E278                     160                  ROR.W D1, D0
000010EE  123C 000A                161                  MOVE.B #shift10, D1
000010F2                           162                  
000010F2  E268                     163                  LSR.W D1, D0
000010F4                           164                  *must isolate the mode
000010F4  E658                     165                  ROR.W #3, D0
000010F6  123C 000D                166                  MOVE.B #shift13, D1
000010FA  E268                     167                  LSR.W  D1, D0       *mode isolated
000010FC                           168                  
000010FC  4EB9 00001142            169                  JSR ModeCompare
00001102                           170                  *JSR DesXnDecode
00001102  4E71                     171                  NOP
00001104  4E75                     172                  RTS *done here
00001106                           173  
00001106                           174  
00001106  3006                     175  DesXnDecode     MOVE.W D6,D0
00001108  123C 000C                176                  MOVE.B #shift12, D1
0000110C  E278                     177                  ROR.W D1, D0
0000110E  123C 000D                178                  MOVE.B #shift13, D1
00001112                           179                  
00001112  E268                     180                  LSR.W D1, D0    *isolates Xn
00001114                           181                  
00001114  4EB9 0000117E            182                  JSR XnCompare
0000111A  4E75                     183                  RTS
0000111C                           184  
0000111C                           185  *----------------------------------------------------------------
0000111C                           186  *                         Decode Methods                        |
0000111C                           187  *----------------------------------------------------------------
0000111C                           188  
0000111C  6000 0002                189  RegModeXnDecode      BRA ModeDecode
00001120                           190  
00001120                           191          
00001120  3006                     192  ModeDecode      MOVE.W D6, D0
00001122  EC58                     193                  ROR.W #6, D0
00001124  123C 000A                194                  MOVE.B  #shift10,D1       *Shift 10 bits to the right  
00001128                           195  
00001128  E268                     196                  LSR.W   D1,D0           *Move the bits
0000112A                           197                  
0000112A  E648                     198                  LSR.W #3, D0   *D2 now has the mode
0000112C  4EB9 00001142            199                  JSR ModeCompare
00001132  4E75                     200                  RTS    
00001134                           201  
00001134  3006                     202  XnDecode        MOVE.W D6, D0
00001136  E658                     203                  ROR.W #3, D0       * last three bits to isolate Xn
00001138                           204                  
00001138  123C 000D                205                  MOVE.B #shift13, D1
0000113C  E268                     206                  LSR.W D1,D0        *format is good last three bits in least signifant location
0000113E  6000 003E                207                  Bra XnCompare
00001142                           208  
00001142                           209  
00001142                           210  
00001142                           211  
00001142                           212  *----------------------------------------------------------------
00001142                           213  *                         Comparisons                           |
00001142                           214  *----------------------------------------------------------------
00001142                           215  
00001142                           216  
00001142                           217  *------------------Mode Comparisons -----------------------------------------
00001142                           218  
00001142  0C00 0000                219  ModeCompare     CMPI.B #%000, D0 * last three are zeroes
00001146  6700 0096                220                  BEQ   disDnRegSrcMode       *jump to subroutine for Data register Source
0000114A  6600 0002                221                  BNE   ModeCompare1              *FIXME: needs to have not equal Branch here
0000114E                           222                  
0000114E  0C00 0001                223  ModeCompare1    CMPI.B  #%001, D0
00001152  6700 00A6                224                  BEQ disAnRegSrcMode
00001156  6600 0002                225                  BNE ModeCompare2
0000115A                           226                  
0000115A  0C00 0002                227  ModeCompare2    CMPI.B  #%010, D0
0000115E  6700 009A                228                  BEQ disAnIndMode
00001162  6600 0002                229                  BNE ModeCompare3
00001166                           230                  
00001166  0C00 0003                231  ModeCompare3    CMPI.B  #%011, D0
0000116A                           232                  *BEQ disAnIndPostMode
0000116A  6600 0002                233                  BNE ModeCompare4
0000116E                           234  
0000116E  0C00 0004                235  ModeCompare4    CMPI.B  #%100, D0
00001172                           236                  *BEQ disAnIndPreMode
00001172  6600 0002                237                  BNE ModeCompare5
00001176                           238                  
00001176  0C00 0007                239  ModeCompare5    CMPI.B  #%111, D0
0000117A                           240                  *BEQ disEAmode
0000117A  6600 012E                241                  BNE disError
0000117E                           242  
0000117E                           243               
0000117E                           244  
0000117E                           245  *---------------------Register Compare---------------------                
0000117E  0C00 0000                246  XnCompare       CMPI.b #%000, D0
00001182  6700 00B6                247                  BEQ XnIs0
00001186  6600 0002                248                  BNE XnCompare1
0000118A                           249                  
0000118A  0C00 0001                250  XnCompare1      CMPI.b #%001, D0
0000118E  6700 00B8                251                  BEQ XnIs1
00001192  6600 0002                252                  BNE XnCompare2
00001196                           253  
00001196  0C00 0002                254  XnCompare2      CMPI.b #%010, D0
0000119A  6700 00BA                255                  BEQ XnIs2
0000119E  6600 0002                256                  BNE XnCompare3
000011A2                           257  
000011A2  0C00 0003                258  XnCompare3      CMPI.b #%011, D0
000011A6  6700 00BC                259                  BEQ XnIs3
000011AA  6600 0002                260                  BNE XnCompare4
000011AE                           261  
000011AE  0C00 0004                262  XnCompare4      CMPI.b #%100, D0
000011B2  6700 00BE                263                  BEQ XnIs4
000011B6  6600 0002                264                  BNE XnCompare5
000011BA                           265  
000011BA  0C00 0005                266  XnCompare5      CMPI.b #%101, D0
000011BE  6700 00C0                267                  BEQ XnIs5
000011C2  6600 0002                268                  BNE XnCompare6
000011C6                           269  
000011C6  0C00 0006                270  XnCompare6      CMPI.b #%110, D0
000011CA  6700 00C2                271                  BEQ XnIs6
000011CE  6600 0002                272                  BNE XnCompare7
000011D2                           273  
000011D2  0C00 0007                274  XnCompare7      CMPI.b #%111, D0
000011D6  6700 00C4                275                  BEQ XnIs7
000011DA  6600 00CE                276                  BNE disError
000011DE                           277                  * FIXME we may need to use this for a bad command BNE XnCompare1
000011DE                           278  
000011DE                           279  
000011DE                           280  *----------------------------------------------------------------
000011DE                           281  *                          DISPLAYS                             |
000011DE                           282  *----------------------------------------------------------------
000011DE                           283  
000011DE                           284  
000011DE                           285  
000011DE                           286  
000011DE                           287  *---------------------MODE Displays----------------------
000011DE  43F9 000012E4            288  disDnRegSrcMode LEA DnReg, A1
000011E4  103C 000E                289                  MOVE.B #14, D0
000011E8  4E4F                     290                  TRAP #15
000011EA  0C07 0001                291                  CMPI.B #%1, D7
000011EE  6700 0044                292                  BEQ     DesDisXn
000011F2  6600 003A                293                  BNE     SrcDisXn
000011F6  4287                     294                  CLR.L D7
000011F8  4E75                     295                  RTS
000011FA                           296                      
000011FA                           297  disAnRegSrcMode
000011FA                           298  
000011FA  43F9 000012E8            299  disAnIndMode    LEA LeftParen, A1
00001200  103C 000E                300                  MOVE.B  #14, D0
00001204  4E4F                     301                  TRAP    #15
00001206  43F9 000012E6            302                  LEA AnReg,      A1
0000120C  103C 000E                303                  MOVE.B  #14,     D0
00001210  4E4F                     304                  TRAP    #15
00001212  0C07 0001                305                  CMPI.B #%1, D7
00001216  6700 001C                306                  BEQ     DesDisXn
0000121A  6600 0012                307                  BNE     SrcDisXn
0000121E  4287                     308                  CLR.L D7
00001220  43F9 000012EA            309                  LEA     RightParen, A1
00001226  103C 000E                310                  MOVE.B  #14,    D0
0000122A  4E4F                     311                  TRAP    #15
0000122C  4E75                     312                  RTS
0000122E                           313  
0000122E                           314  
0000122E  4EB8 1134                315  SrcDisXn        JSR XnDecode
00001232  4E75                     316                  RTS
00001234                           317          
00001234  4EB8 1106                318  DesDisXn        JSR DesXnDecode
00001238  4E75                     319                  RTS
0000123A                           320                  
0000123A                           321                        
0000123A                           322  *----------------------Register Displays----------------------                
0000123A  43F9 0000133A            323  XnIs0           LEA disZero, A1
00001240  103C 000E                324                  MOVE.B #14, D0
00001244  4E4F                     325                  TRAP #15
00001246  4E75                     326                  RTS
00001248                           327                  
00001248  43F9 0000133C            328  XnIs1           LEA disOne, A1
0000124E  103C 000E                329                  MOVE.B #14, D0
00001252  4E4F                     330                  TRAP #15
00001254  4E75                     331                  RTS
00001256                           332  
00001256  43F9 0000133E            333  XnIs2           LEA disTwo, A1
0000125C  103C 000E                334                  MOVE.B #14, D0
00001260  4E4F                     335                  TRAP #15
00001262  4E75                     336                  RTS
00001264                           337  
00001264  43F9 00001340            338  XnIs3           LEA disThree, A1
0000126A  103C 000E                339                  MOVE.B #14, D0
0000126E  4E4F                     340                  TRAP #15
00001270  4E75                     341                  RTS
00001272                           342  
00001272  43F9 00001342            343  XnIs4           LEA disFour, A1
00001278  103C 000E                344                  MOVE.B #14, D0
0000127C  4E4F                     345                  TRAP #15
0000127E  4E75                     346                  RTS
00001280                           347  
00001280  43F9 00001344            348  XnIs5           LEA disFive, A1
00001286  103C 000E                349                  MOVE.B #14, D0
0000128A  4E4F                     350                  TRAP #15
0000128C  4E75                     351                  RTS
0000128E                           352  
0000128E  43F9 00001346            353  XnIs6           LEA disSix, A1
00001294  103C 000E                354                  MOVE.B #14, D0
00001298  4E4F                     355                  TRAP #15
0000129A  4E75                     356                  RTS
0000129C                           357  
0000129C  43F9 00001348            358  XnIs7           LEA disSeven, A1
000012A2  103C 000E                359                  MOVE.B #14, D0
000012A6  4E4F                     360                  TRAP #15
000012A8  4E75                     361                  RTS
000012AA                           362  
000012AA                           363  
000012AA                           364                  
000012AA  43F9 000012C6            365  disError        LEA Error, A1
000012B0  103C 000E                366                  Move.B #14, D0
000012B4  4E4F                     367                  Trap #15
000012B6  4E75                     368                  RTS               
000012B8                           369                  
000012B8  43F9 000012CC            370  disMoveByte     LEA MOVEByteDis, A1
000012BE  103C 000E                371                  MOVE.B #14, D0
000012C2  4E4F                     372                  TRAP #15
000012C4  4E75                     373                  RTS                
000012C6                           374           
000012C6                           375           
000012C6                           376           
000012C6                           377  *----------------------------------------------------------------
000012C6                           378  *                         String constants                      |
000012C6                           379  *----------------------------------------------------------------
000012C6                           380  
000012C6                           381  * Put variables and constants here
000012C6= 65 72 72 6F 72 00        382  Error DC.B  'error', 0
000012CC                           383  
000012CC= 4D 4F 56 45 2E 42 ...    384  MOVEByteDis    DC.B   'MOVE.B ', 0
000012D4= 4D 4F 56 45 2E 57 ...    385  MOVEWordDis    DC.B   'MOVE.W ', 0   
000012DC= 4D 4F 56 45 2E 4C ...    386  MOVELongDis    DC.B   'MOVE.L ', 0
000012E4= 44 00                    387  DnReg       DC.B   'D', 0
000012E6= 41 00                    388  AnReg       DC.B   'A', 0
000012E8= 28 00                    389  LeftParen   DC.B    '(', 0
000012EA= 29 00                    390  RightParen  DC.B    ')', 0
000012EC= 49 64 65 6E 74 69 ...    391  ASKSTART    DC.B   'Identify the starting memory location: ', 0
00001314= 49 64 65 6E 74 69 ...    392  ASKEND      DC.B   'Identify the ending memory location: ', 0
0000133A                           393  
0000133A                           394  *numbers
0000133A= 30 00                    395  disZero     DC.B    '0', 0
0000133C= 31 00                    396  disOne      DC.B    '1', 0
0000133E= 32 00                    397  disTwo      DC.B    '2', 0
00001340= 33 00                    398  disThree    DC.B    '3', 0
00001342= 34 00                    399  disFour     DC.B    '4', 0
00001344= 35 00                    400  disFive     DC.B    '5', 0
00001346= 36 00                    401  disSix      DC.B    '6', 0
00001348= 37 00                    402  disSeven    DC.B    '7', 0
0000134A                           403  
0000134A                           404  
0000134A                           405  
0000134A                           406      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ANREG               12E6
ASKEND              1314
ASKSTART            12EC
CODE0000            1084
CODE0001            1088
CODE0010            108C
CODE0011            1090
CODE0100            1094
CODE0101            1098
CODE0110            109C
CODE0111            10A0
CODE1000            10A4
CODE1001            10A8
CODE1010            10AC
CODE1011            10B0
CODE1100            10B2
CODE1101            10B6
CODE1110            10BA
CODE1111            10BE
DESDISXN            1234
DESMODEDECODE       10E2
DESMOVEDECODE       10DE
DESXNDECODE         1106
DISANINDMODE        11FA
DISANREGSRCMODE     11FA
DISDNREGSRCMODE     11DE
DISERROR            12AA
DISFIVE             1344
DISFOUR             1342
DISMOVEBYTE         12B8
DISONE              133C
DISSEVEN            1348
DISSIX              1346
DISTHREE            1340
DISTWO              133E
DISZERO             133A
DNREG               12E4
ENDPT               55
ERROR               12C6
EXAMPLE             1217
JMP_TABLE           1024
LEFTPAREN           12E8
MODECOMPARE         1142
MODECOMPARE1        114E
MODECOMPARE2        115A
MODECOMPARE3        1166
MODECOMPARE4        116E
MODECOMPARE5        1176
MODEDECODE          1120
MOVEBYTE            10C2
MOVEBYTEDIS         12CC
MOVELONGDIS         12DC
MOVEWORDDIS         12D4
REGMODEXNDECODE     111C
RIGHTPAREN          12EA
SHIFT10             A
SHIFT12             C
SHIFT13             D
SRCDISXN            122E
STACK               A000
START               1000
STARTPT             AA
TEMP                400
XNCOMPARE           117E
XNCOMPARE1          118A
XNCOMPARE2          1196
XNCOMPARE3          11A2
XNCOMPARE4          11AE
XNCOMPARE5          11BA
XNCOMPARE6          11C6
XNCOMPARE7          11D2
XNDECODE            1134
XNIS0               123A
XNIS1               1248
XNIS2               1256
XNIS3               1264
XNIS4               1272
XNIS5               1280
XNIS6               128E
XNIS7               129C
